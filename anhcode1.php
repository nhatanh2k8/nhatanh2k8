<?php eval(base64_decode('DQplcnJvcl9yZXBvcnRpbmcoMCk7DQpkYXRlX2RlZmF1bHRfdGltZXpvbmVfc2V0KCJBc2lhL0hvX0NoaV9NaW5oIik7DQojaW5pX3NldCgnZGlzcGxheV9lcnJvcnMnLCAxKTsNCiNpbmlfc2V0KCdkaXNwbGF5X3N0YXJ0dXBfZXJyb3JzJywgMSk7DQojZXJyb3JfcmVwb3J0aW5nKEVfQUxMKTsNCiRjb29raWVfZmlsZSA9IF9fRElSX18gLiAnL2Nvb2tpZS50eHQnOw0KZnVuY3Rpb24gaW5wdXQoJHRleHQpIHsNCiAgICBlY2hvICR0ZXh0Ow0KICAgIHJldHVybiB0cmltKGZnZXRzKFNURElOKSk7DQp9DQpmdW5jdGlvbiBoaWVudGhpKCRmYl9uYW1lLCAkZGVtLCAkbG9haSwgJGlkLCAkeHVqb2IsICR4dSl7DQpkYXRlX2RlZmF1bHRfdGltZXpvbmVfc2V0KCAnQXNpYS9Ib19DaGlfTWluaCcgKTsNCgkka2wgPSAiXGVbMTszMm3ijKBcZVsxOzMzbSIuJGZiX25hbWUuIlxlWzE7MzJt4oyhXGVbMTszNW3ina9cZVsxOzM2beKdr1xlWzE7MzFt4p2vXDAzM1sxOzM0bVtcMDMzWzE7MzNtIi4kZGVtLiJcMDMzWzE7MzRtXVwwMzNbMTs5MW0g4pePIFwwMzNbMTszNm0iLmRhdGUoIkg6aTpzIikuIlwwMzNbMTszMW0g4pePIFwwMzNbMTsiLnJhbmQoMzEsMzcpLiJtIi4kbG9haS4iXDAzM1sxOzMxbSDil48gXDAzM1sxOzM3bSIuJGlkLiJcMDMzWzE7MzFtIOKXjyBcMDMzWzE7MzJtJHh1am9iIFwwMzNbMTszMW3il49cMDMzWzE7MzJtICR4dSBcbiI7DQpmb3IoJGkgPSAwOyAkaSA8IHN0cmxlbigka2wpOyAkaSsrKXtlY2hvICRrbFskaV07dXNsZWVwKDUwMCk7fQ0KfQ0KZnVuY3Rpb24gY210KCR0b2tlbiwgJHBhZ2VfaWQsICRtc2cpIHsNCiAkY2ggPSBjdXJsX2luaXQoKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJy4kcGFnZV9pZC4nL2NvbW1lbnRzJyk7DQogICAgJGhlYWRbXSA9ICJDb25uZWN0aW9uOiBrZWVwLWFsaXZlIjsNCiAgICAkaGVhZFtdID0gIktlZXAtQWxpdmU6IDMwMCI7DQogICAgJGhlYWRbXSA9ICJhdXRob3JpdHk6IG0uZmFjZWJvb2suY29tIjsNCiAgICAkaGVhZFtdID0gImNjZXB0LUNoYXJzZXQ6IElTTy04ODU5LTEsdXRmLTg7cT0wLjcsKjtxPTAuNyI7DQogICAgJGhlYWRbXSA9ICJhY2NlcHQtbGFuZ3VhZ2U6IHZpLVZOLHZpO3E9MC45LGZyLUZSO3E9MC44LGZyO3E9MC43LGVuLVVTO3E9MC42LGVuO3E9MC41IjsNCiAgICAkaGVhZFtdID0gImNhY2hlLWNvbnRyb2w6IG1heC1hZ2U9MCI7DQogICAgJGhlYWRbXSA9ICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIjsNCiAgICAkaGVhZFtdID0gImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSI7DQogICAgJGhlYWRbXSA9ICJzZWMtZmV0Y2gtc2l0ZTogbm9uZSI7DQogICAgJGhlYWRbXSA9ICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiOw0KICAgICRoZWFkW10gPSAic2VjLWZldGNoLXVzZXI6ID8xIjsNCiAgICAkaGVhZFtdID0gInNlYy1mZXRjaC1kZXN0OiBkb2N1bWVudCI7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1VTRVJBR0VOVCwgJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NC4wLjQxNDcuMTM1IFNhZmFyaS81MzcuMzYnKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfRU5DT0RJTkcsICcnKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgJGhlYWQpOw0KICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1NTTF9WRVJJRllQRUVSLCBGQUxTRSk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1RJTUVPVVQsIDYwKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09OTkVDVFRJTUVPVVQsIDYwKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfRk9MTE9XTE9DQVRJT04sIFRSVUUpOw0KICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IVFRQSEVBREVSLCBhcnJheSgnRXhwZWN0OicpKTsNCiAgICAkZGF0YSA9IGFycmF5KCdtZXNzYWdlJyA9PiAkbXNnLCAnYWNjZXNzX3Rva2VuJyA9PiAkdG9rZW4pOw0KICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NULCBjb3VudCgkZGF0YSkpOw0KICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NURklFTERTLCAkZGF0YSk7DQogICAgJGFjY2VzcyA9IGN1cmxfZXhlYygkY2gpOw0KICAgIGN1cmxfY2xvc2UoJGNoKTsNCiAgICByZXR1cm4ganNvbl9kZWNvZGUoJGFjY2Vzcyk7DQp9DQoNCmZ1bmN0aW9uIHNoYXJlKCR0b2tlbiwkaWRwb3N0KXsNCiAgICAkY2ggPSBjdXJsX2luaXQoKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWUvZmVlZD9tZXRob2Q9UE9TVCZsaW5rPWh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS8nLiRpZHBvc3QuJyZwcml2YWN5PXslMjd2YWx1ZSUyNzolMjAlMjdFVkVSWU9ORSUyN30mYWNjZXNzX3Rva2VuPScuJHRva2VuKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIDEpOw0KICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DVVNUT01SRVFVRVNULCAnR0VUJyk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0VOQ09ESU5HLCAnZ3ppcCwgZGVmbGF0ZScpOw0KICAgICRoZWFkZXJzID0gYXJyYXkoKTsNCiAgICAkaGVhZGVyc1tdID0gJ0F1dGhvcml0eTogZ3JhcGguZmFjZWJvb2suY29tJzsNCiAgICAkaGVhZGVyc1tdID0gJ1VwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDEnOw0KICAgICRoZWFkZXJzW10gPSAnVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg4LjAuNDMyNC4xOTAgU2FmYXJpLzUzNy4zNic7DQogICAgJGhlYWRlcnNbXSA9ICdBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSc7DQogICAgJGhlYWRlcnNbXSA9ICdTZWMtRmV0Y2gtU2l0ZTogbm9uZSc7DQogICAgJGhlYWRlcnNbXSA9ICdTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUnOw0KICAgICRoZWFkZXJzW10gPSAnU2VjLUZldGNoLVVzZXI6ID8xJzsNCiAgICAkaGVhZGVyc1tdID0gJ1NlYy1GZXRjaC1EZXN0OiBkb2N1bWVudCc7DQogICAgJGhlYWRlcnNbXSA9ICdBY2NlcHQtTGFuZ3VhZ2U6IHZpLVZOLHZpO3E9MC45LGZyLUZSO3E9MC44LGZyO3E9MC43LGVuLVVTO3E9MC42LGVuO3E9MC41JzsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgJGhlYWRlcnMpOw0KDQogICAgJHJlc3VsdCA9IGN1cmxfZXhlYygkY2gpOw0KICAgIGlmIChjdXJsX2Vycm5vKCRjaCkpIHsNCiAgICAgICAgZWNobyAnRXJyb3I6JyAuIGN1cmxfZXJyb3IoJGNoKTsNCiAgICB9DQogICAgY3VybF9jbG9zZSgkY2gpOw0KICAgIHJldHVybiAkcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBsaWtlX3BhZ2VfZmFjZWJvb2soJHRva2VuLCAkZmJfdWlkLCAkcGFnZV9pZCkgew0KICAgICRwb3N0RmllbGRzID0gWw0KICAgICAgICAnbWV0aG9kJyA9PiAncG9zdCcsDQogICAgICAgICdwcmV0dHknID0+ICdmYWxzZScsDQogICAgICAgICdmb3JtYXQnID0+ICdqc29uJywNCiAgICAgICAgJ3NlcnZlcl90aW1lc3RhbXBzJyA9PiAndHJ1ZScsDQogICAgICAgICdsb2NhbGUnID0+ICdlbl9VUycsDQogICAgICAgICdmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUnID0+ICdQYWdlTGlrZScsDQogICAgICAgICdmYl9hcGlfY2FsbGVyX2NsYXNzJyA9PiAnZ3JhcGhzZXJ2aWNlJywNCiAgICAgICAgJ2NsaWVudF9kb2NfaWQnID0+ICc5MjI0NjQ2MjUxMjk3NTIzMjAyNDU0MzU2NDQxNycsDQogICAgICAgICd2YXJpYWJsZXMnID0+IGpzb25fZW5jb2RlKFsNCiAgICAgICAgICAgICJpbnB1dCIgPT4gWw0KICAgICAgICAgICAgICAgICJzb3VyY2UiID0+ICJwYWdlX3Byb2ZpbGUiLA0KICAgICAgICAgICAgICAgICJjbGllbnRfbXV0YXRpb25faWQiID0+IHVuaXFpZCgpLA0KICAgICAgICAgICAgICAgICJwYWdlX2lkIiA9PiAkcGFnZV9pZCwNCiAgICAgICAgICAgICAgICAiYWN0b3JfaWQiID0+ICRmYl91aWQNCiAgICAgICAgICAgIF0NCiAgICAgICAgXSksDQogICAgXTsNCg0KICAgICRoZWFkZXJzID0gWw0KICAgICAgICAnQXV0aG9yaXphdGlvbjogT0F1dGggJyAuICR0b2tlbiwNCiAgICAgICAgJ1VzZXItQWdlbnQ6IE1vemlsbGEvNS4wJywNCiAgICAgICAgJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywNCiAgICBdOw0KDQogICAgJGNoID0gY3VybF9pbml0KCJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS9ncmFwaHFsIik7DQogICAgY3VybF9zZXRvcHRfYXJyYXkoJGNoLCBbDQogICAgICAgIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIgPT4gdHJ1ZSwNCiAgICAgICAgQ1VSTE9QVF9QT1NUID0+IHRydWUsDQogICAgICAgIENVUkxPUFRfUE9TVEZJRUxEUyA9PiBodHRwX2J1aWxkX3F1ZXJ5KCRwb3N0RmllbGRzKSwNCiAgICAgICAgQ1VSTE9QVF9IVFRQSEVBREVSID0+ICRoZWFkZXJzLA0KICAgIF0pOw0KDQogICAgJHJlc3BvbnNlID0gY3VybF9leGVjKCRjaCk7DQogICAgY3VybF9jbG9zZSgkY2gpOw0KICAgICRyZXMgPSBqc29uX2RlY29kZSgkcmVzcG9uc2UsIHRydWUpOw0KDQogICAgcmV0dXJuIGlzc2V0KCRyZXNbJ2RhdGEnXVsncGFnZV9saWtlJ11bJ3BhZ2UnXVsnZG9lc192aWV3ZXJfbGlrZSddKSAmJg0KICAgICAgICAgICAkcmVzWydkYXRhJ11bJ3BhZ2VfbGlrZSddWydwYWdlJ11bJ2RvZXNfdmlld2VyX2xpa2UnXSA9PSB0cnVlOw0KfQ0KDQpmdW5jdGlvbiBsaWtldmlwKCR0b2tlbiwgJHBhZ2VfaWQpIHsNCiAgICAkY2ggPSBjdXJsX2luaXQoKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJy4kcGFnZV9pZC4nL2xpa2VzJyk7DQogICAgJGhlYWRbXSA9ICJDb25uZWN0aW9uOiBrZWVwLWFsaXZlIjsNCiAgICAkaGVhZFtdID0gIktlZXAtQWxpdmU6IDMwMCI7DQogICAgJGhlYWRbXSA9ICJhdXRob3JpdHk6IG0uZmFjZWJvb2suY29tIjsNCiAgICAkaGVhZFtdID0gImNjZXB0LUNoYXJzZXQ6IElTTy04ODU5LTEsdXRmLTg7cT0wLjcsKjtxPTAuNyI7DQogICAgJGhlYWRbXSA9ICJhY2NlcHQtbGFuZ3VhZ2U6IHZpLVZOLHZpO3E9MC45LGZyLUZSO3E9MC44LGZyO3E9MC43LGVuLVVTO3E9MC42LGVuO3E9MC41IjsNCiAgICAkaGVhZFtdID0gImNhY2hlLWNvbnRyb2w6IG1heC1hZ2U9MCI7DQogICAgJGhlYWRbXSA9ICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIjsNCiAgICAkaGVhZFtdID0gImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSI7DQogICAgJGhlYWRbXSA9ICJzZWMtZmV0Y2gtc2l0ZTogbm9uZSI7DQogICAgJGhlYWRbXSA9ICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiOw0KICAgICRoZWFkW10gPSAic2VjLWZldGNoLXVzZXI6ID8xIjsNCiAgICAkaGVhZFtdID0gInNlYy1mZXRjaC1kZXN0OiBkb2N1bWVudCI7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1VTRVJBR0VOVCwgJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NC4wLjQxNDcuMTM1IFNhZmFyaS81MzcuMzYnKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfRU5DT0RJTkcsICcnKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgJGhlYWQpOw0KICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1NTTF9WRVJJRllQRUVSLCBGQUxTRSk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1RJTUVPVVQsIDYwKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09OTkVDVFRJTUVPVVQsIDYwKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfRk9MTE9XTE9DQVRJT04sIFRSVUUpOw0KICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IVFRQSEVBREVSLCBhcnJheSgnRXhwZWN0OicpKTsNCiAgICAkZGF0YSA9IGFycmF5KCdhY2Nlc3NfdG9rZW4nID0+ICR0b2tlbik7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1QsIGNvdW50KCRkYXRhKSk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1RGSUVMRFMsICRkYXRhKTsNCiAgICAkYWNjZXNzID0gY3VybF9leGVjKCRjaCk7DQogICAgY3VybF9jbG9zZSgkY2gpOw0KICAgIHJldHVybiBqc29uX2RlY29kZSgkYWNjZXNzKTsNCg0KfQ0KZnVuY3Rpb24gZm9sbG93KCR0b2tlbiwgJGlkcG9zdCkgew0KICAgICRjaCA9IGN1cmxfaW5pdCgpOw0KICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsICdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nIC4gJGlkcG9zdC4gJy9zdWJzY3JpYmVycycpOw0KICAgIA0KICAgICRoZWFkZXJzID0gWw0KICAgICAgICAiQ29ubmVjdGlvbjoga2VlcC1hbGl2ZSIsDQogICAgICAgICJLZWVwLUFsaXZlOiAzMDAiLA0KICAgICAgICAiQWNjZXB0LUNoYXJzZXQ6IElTTy04ODU5LTEsdXRmLTg7cT0wLjcsKjtxPTAuNyIsDQogICAgICAgICJBY2NlcHQtTGFuZ3VhZ2U6IHZpLVZOLHZpO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43IiwNCiAgICAgICAgIkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MCIsDQogICAgICAgICJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxIiwNCiAgICAgICAgIkFjY2VwdDogYXBwbGljYXRpb24vanNvbiIsDQogICAgICAgICJFeHBlY3Q6Ig0KICAgIF07DQogICAgDQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1VTRVJBR0VOVCwgJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpJyk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBIRUFERVIsICRoZWFkZXJzKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIHRydWUpOw0KICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUiwgZmFsc2UpOw0KICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9USU1FT1VULCA2MCk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0NPTk5FQ1RUSU1FT1VULCA2MCk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCB0cnVlKTsNCiAgICANCiAgICAkcG9zdERhdGEgPSBbJ2FjY2Vzc190b2tlbicgPT4gJHRva2VuXTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVCwgdHJ1ZSk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1RGSUVMRFMsIGh0dHBfYnVpbGRfcXVlcnkoJHBvc3REYXRhKSk7DQogICAgDQogICAgJHJlc3BvbnNlID0gY3VybF9leGVjKCRjaCk7DQogICAgY3VybF9jbG9zZSgkY2gpOw0KICAgIA0KICAgIHJldHVybiBqc29uX2RlY29kZSgkcmVzcG9uc2UsIHRydWUpOw0KfQ0KDQpmdW5jdGlvbiBsaWtlKCR0b2tlbiwgJHBhZ2VfaWQpIHsNCiAgICAkY2ggPSBjdXJsX2luaXQoKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJy4kcGFnZV9pZC4nL2xpa2VzJyk7DQogICAgJGhlYWRbXSA9ICJDb25uZWN0aW9uOiBrZWVwLWFsaXZlIjsNCiAgICAkaGVhZFtdID0gIktlZXAtQWxpdmU6IDMwMCI7DQogICAgJGhlYWRbXSA9ICJhdXRob3JpdHk6IG0uZmFjZWJvb2suY29tIjsNCiAgICAkaGVhZFtdID0gImNjZXB0LUNoYXJzZXQ6IElTTy04ODU5LTEsdXRmLTg7cT0wLjcsKjtxPTAuNyI7DQogICAgJGhlYWRbXSA9ICJhY2NlcHQtbGFuZ3VhZ2U6IHZpLVZOLHZpO3E9MC45LGZyLUZSO3E9MC44LGZyO3E9MC43LGVuLVVTO3E9MC42LGVuO3E9MC41IjsNCiAgICAkaGVhZFtdID0gImNhY2hlLWNvbnRyb2w6IG1heC1hZ2U9MCI7DQogICAgJGhlYWRbXSA9ICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzOiAxIjsNCiAgICAkaGVhZFtdID0gImFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSI7DQogICAgJGhlYWRbXSA9ICJzZWMtZmV0Y2gtc2l0ZTogbm9uZSI7DQogICAgJGhlYWRbXSA9ICJzZWMtZmV0Y2gtbW9kZTogbmF2aWdhdGUiOw0KICAgICRoZWFkW10gPSAic2VjLWZldGNoLXVzZXI6ID8xIjsNCiAgICAkaGVhZFtdID0gInNlYy1mZXRjaC1kZXN0OiBkb2N1bWVudCI7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1VTRVJBR0VOVCwgJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NC4wLjQxNDcuMTM1IFNhZmFyaS81MzcuMzYnKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfRU5DT0RJTkcsICcnKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUEhFQURFUiwgJGhlYWQpOw0KICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1NTTF9WRVJJRllQRUVSLCBGQUxTRSk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1RJTUVPVVQsIDYwKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09OTkVDVFRJTUVPVVQsIDYwKTsNCiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfRk9MTE9XTE9DQVRJT04sIFRSVUUpOw0KICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IVFRQSEVBREVSLCBhcnJheSgnRXhwZWN0OicpKTsNCiAgICAkZGF0YSA9IGFycmF5KCdhY2Nlc3NfdG9rZW4nID0+ICR0b2tlbik7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1QsIGNvdW50KCRkYXRhKSk7DQogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1RGSUVMRFMsICRkYXRhKTsNCiAgICAkYWNjZXNzID0gY3VybF9leGVjKCRjaCk7DQogICAgY3VybF9jbG9zZSgkY2gpOw0KICAgIHJldHVybiBqc29uX2RlY29kZSgkYWNjZXNzKTsNCg0KfQ0KDQoNCmZ1bmN0aW9uIGN1cmxfcG9zdCgkdXJsLCAkZGF0YSwgJGhlYWRlcnMgPSBbXSkgew0KICAgIGdsb2JhbCAkY29va2llX2ZpbGU7DQogICAgJGNoID0gY3VybF9pbml0KCR1cmwpOw0KICAgIGN1cmxfc2V0b3B0X2FycmF5KCRjaCwgWw0KICAgICAgICBDVVJMT1BUX1JFVFVSTlRSQU5TRkVSID0+IHRydWUsDQogICAgICAgIENVUkxPUFRfUE9TVCA9PiB0cnVlLA0KICAgICAgICBDVVJMT1BUX1BPU1RGSUVMRFMgPT4gaXNfYXJyYXkoJGRhdGEpID8gaHR0cF9idWlsZF9xdWVyeSgkZGF0YSkgOiAkZGF0YSwNCiAgICAgICAgQ1VSTE9QVF9DT09LSUVKQVIgPT4gJGNvb2tpZV9maWxlLA0KICAgICAgICBDVVJMT1BUX0NPT0tJRUZJTEUgPT4gJGNvb2tpZV9maWxlLA0KICAgICAgICBDVVJMT1BUX0hUVFBIRUFERVIgPT4gJGhlYWRlcnMsDQogICAgXSk7DQogICAgJHJlcyA9IGN1cmxfZXhlYygkY2gpOw0KICAgIGN1cmxfY2xvc2UoJGNoKTsNCiAgICByZXR1cm4gJHJlczsNCn0NCg0KDQpmdW5jdGlvbiBjdXJsX2dldCgkdXJsLCAkaGVhZGVycyA9IFtdKSB7DQogICAgZ2xvYmFsICRjb29raWVfZmlsZTsNCiAgICAkY2ggPSBjdXJsX2luaXQoJHVybCk7DQogICAgY3VybF9zZXRvcHRfYXJyYXkoJGNoLCBbDQogICAgICAgIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIgPT4gdHJ1ZSwNCiAgICAgICAgQ1VSTE9QVF9DT09LSUVKQVIgPT4gJGNvb2tpZV9maWxlLA0KICAgICAgICBDVVJMT1BUX0NPT0tJRUZJTEUgPT4gJGNvb2tpZV9maWxlLA0KICAgICAgICBDVVJMT1BUX0hUVFBIRUFERVIgPT4gJGhlYWRlcnMsDQogICAgXSk7DQogICAgJHJlcyA9IGN1cmxfZXhlYygkY2gpOw0KICAgIGN1cmxfY2xvc2UoJGNoKTsNCiAgICByZXR1cm4gJHJlczsNCn0NCg0KZnVuY3Rpb24gcHJpbnRTbG93KCR0ZXh0LCAkZGVsYXkgPSAyMDAwMCkgew0KICAgICRjaGFycyA9IHN0cl9zcGxpdCgkdGV4dCk7DQogICAgZm9yZWFjaCAoJGNoYXJzIGFzICRjaGFyKSB7DQogICAgICAgIGVjaG8gJGNoYXI7DQogICAgICAgIHVzbGVlcCgkZGVsYXkpOyAvLyBtaWNybyBnacOieSAoMTAwMCA9IDFtcywgMjAwMDAgPSAyMG1zKQ0KICAgIH0NCiAgICBlY2hvICJcbiI7DQp9DQpAc3lzdGVtKCdjbGVhcicpOw0KZnVuY3Rpb24gZGVsYXkgKCRkZWxheSl7DQogICAgDQoJZm9yKCR0dCA9ICRkZWxheSA7JHR0Pj0gMTskdHQtLSl7DQogICAgICAgIGVjaG8gIlxyXDAzM1sxOzMzbSAgIFRUQ19GQiBcMDMzWzE7MzFtIH4+ICAgICAgIFwwMzNbMTszMm0gTE8gICAgICBcMDMzWzE7MzFtIHwgJHR0IHwgIjsgdXNsZWVwKDE1MDAwMCk7DQogICAgICAgIGVjaG8gIlxyXDAzM1sxOzMxbSAgIFRUQ19GQiBcMDMzWzA7MzNtICAgfj4gICAgIFwwMzNbMDszN20gTE9BICAgICBcMDMzWzA7MzFtIHwgJHR0IHwgIjsgdXNsZWVwKDE1MDAwMCk7DQogICAgICAgIGVjaG8gIlxyXDAzM1sxOzMybSAgIFRUQ19GQiBcMDMzWzA7MzNtICAgICB+PiAgIFwwMzNbMDszN20gTE9BRCAgICBcMDMzWzA7MzFtIHwgJHR0IHwgIjsgdXNsZWVwKDE1MDAwMCk7DQogICAgICAgIGVjaG8gIlxyXDAzM1sxOzM0bSAgIFRUQ19GQiBcMDMzWzA7MzNtICAgICAgIH4+IFwwMzNbMDszN20gTE9BREkgICBcMDMzWzA7MzFtIHwgJHR0IHwgIjsgdXNsZWVwKDE1MDAwMCk7DQogICAgICAgIGVjaG8gIlxyXDAzM1sxOzM1bSAgIFRUQ19GQiBcMDMzWzA7MzNtICAgICAgICB+PlwwMzNbMDszN20gTE9BRElOICBcMDMzWzA7MzFtIHwgJHR0IHwgIjsgdXNsZWVwKDE1MDAwMCk7DQogICAgICAgIGVjaG8gIlxyXDAzM1sxOzM1bSAgIFRUQ19GQiBcMDMzWzA7MzNtICAgICAgICB+PlwwMzNbMDszN20gTE9BRElORyBcMDMzWzA7MzFtIHwgJHR0IHwgIjsgdXNsZWVwKDE1MDAwMCk7DQogICAgICAgIGVjaG8gIlxyXDAzM1sxOzM1bSAgIFRUQ19GQiBcMDMzWzA7MzNtICAgICAgICB+PlwwMzNbMDszN20gTE9BRElORy5cMDMzWzA7MzFtIHwgJHR0IHwgIjt1c2xlZXAoMTUwMDAwKTt9IA0KZWNobyAiXHJcZVsxOzk1bSAgICDii4bLmuKcv8uWwrDwnZeU8J2XofCdl5vwnZeW8J2XovCdl5fwnZeY4py/ICAgICAgVFRDIEZBQ0VCT09LICAgICAgICAgICAgICAgXHIiOyANCn0NCg0KLy8vLy8vLy8vTE9HTy8vLy8vLy8vLy8vDQogICAgJHhuaGFjID0gIlwwMzNbMTszNm0iOw0KICAgICRkbyA9ICJcMDMzWzE7MzFtIjsNCiAgICAkbHVjID0gIlwwMzNbMTszMm0iOw0KICAgICR2YW5nID0gIlwwMzNbMTszM20iOw0KICAgICR4ZHVvbmcgPSAiXDAzM1sxOzM0bSI7DQogICAgJGhvbmcgPSAiXDAzM1sxOzM1bSI7DQogICAgJHRyYW5nID0gIlwwMzNbMTszN20iOw0KICAgICAkdGhhbmhuZ2FuZyA9ICJcMDMzWzE7MzFt4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXG4iOw0KJHRoYW5oX2RlcCA9ICRkby4iWyIuJHRyYW5nIC4iPS49Ii4kZG8uIl0gIi4kdHJhbmcuIj0+ICI7DQokdGhhbmhfeGF1ID0gJGRvLiJbIi4kdHJhbmcgLiJWSVAiLiRkby4iXSAiLiR0cmFuZy4iPT4gIjsNCmZ1bmN0aW9uIGxvZ28oKSB7DQpAc3lzdGVtKCdjbGVhcicpOw0KICAgICRjb2xvcnMgPSBbDQogICAgICAgICJcMDMzWzE7MzFtIiwgLy8gxJDhu48NCiAgICAgICAgIlwwMzNbMTszM20iLCAvLyBWw6BuZw0KICAgICAgICAiXDAzM1sxOzMybSIsIC8vIFhhbmggbMOhDQogICAgICAgICJcMDMzWzE7MzZtIiwgLy8gWGFuaCBuZ+G7jWMNCiAgICAgICAgIlwwMzNbMTszNG0iLCAvLyBYYW5oIGTGsMahbmcNCiAgICAgICAgIlwwMzNbMTszNW0iLCAvLyBUw61tDQogICAgICAgICJcMDMzWzE7MzdtIiAgLy8gVHLhuq9uZw0KICAgIF07DQoNCiAgICAkeG5oYWMgPSAiXDAzM1sxOzM2bSI7DQogICAgJGRvID0gIlwwMzNbMTszMW0iOw0KICAgICRsdWMgPSAiXDAzM1sxOzMybSI7DQogICAgJHZhbmcgPSAiXDAzM1sxOzMzbSI7DQogICAgJHhkdW9uZyA9ICJcMDMzWzE7MzRtIjsNCiAgICAkaG9uZyA9ICJcMDMzWzE7MzVtIjsNCiAgICAkdHJhbmcgPSAiXDAzM1sxOzM3bSI7DQoNCg0KICAgICRsb2dvID0gWw0KICAgICAgICAi4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKVlyAgIOKWiOKWiOKVl+KWiOKWiOKVlyAg4paI4paI4pWXICAgICDilojilojilojilojilojilojilZcgIOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4paI4pWXIiwNCiAgICAgICAgIuKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKVlyAg4paI4paI4pWR4pWa4paI4paI4pWX4paI4paI4pWU4pWdICAgIOKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVnSDilojilojilZTilZDilZDilZDilojilojilZfilojilojilZTilZDilZDilojilojilZfilojilojilZTilZDilZDilZDilZDilZ0iLA0KICAgICAgICAi4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4pWU4paI4paI4pWXIOKWiOKWiOKVkSDilZrilojilojilojilZTilZ0gICAgIOKWiOKWiOKVkSAg4paI4paI4paI4pWX4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4paI4paI4paI4pWXICAiLA0KICAgICAgICAi4paI4paI4pWU4pWQ4pWQ4paI4paI4pWR4paI4paI4pWR4pWa4paI4paI4pWX4paI4paI4pWRIOKWiOKWiOKVlOKWiOKWiOKVlyAgICAg4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWQ4pWdIOKWiOKWiOKVlOKVkOKVkOKVnSAgIiwNCiAgICAgICAgIuKWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWRIOKVmuKWiOKWiOKWiOKWiOKVkeKWiOKWiOKVlOKVnSDilojilojilZcgICAg4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWRICAgICDilojilojilojilojilojilojilojilZciLA0KICAgICAgICAi4pWa4pWQ4pWdICDilZrilZDilZ3ilZrilZDilZ0gIOKVmuKVkOKVkOKVkOKVneKVmuKVkOKVnSAg4pWa4pWQ4pWdICAgICDilZrilZDilZDilZDilZDilZDilZ0gIOKVmuKVkOKVkOKVkOKVkOKVkOKVnSDilZrilZDilZ0gICAgIOKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVnSINCg0KICAgIF07DQoNCiAgICBmb3JlYWNoICgkbG9nbyBhcyAkaSA9PiAkbGluZSkgew0KICAgICAgICBlY2hvICRjb2xvcnNbJGkgJSBjb3VudCgkY29sb3JzKV07DQogICAgICAgIHByaW50U2xvdygkbGluZSwgMjAwMCk7IC8vIEluIHThu6tuZyBkw7JuZyB24bubaSBoaeG7h3Ug4bupbmcgY2jhuq1tDQogICAgfQ0KDQogICAgJHRoYW5obmdhbmcgPSAiXDAzM1sxOzMxbeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFxuIjsNCiAgICBlY2hvICJcMDMzWzBtIjsNCiAgICBlY2hvICJcblwwMzNbMTszM20iOw0KICAgIHByaW50U2xvdygi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIFRIw5RORyBUSU4gTEnDik4gSOG7hiDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiLCAyMDAwKTsNCiAgICBlY2hvICJcMDMzWzBtIjsNCiAgICBlY2hvICJcMDMzWzE7MzZtIFRlbGU6IFwwMzNbMG0iOyAgcHJpbnRTbG93KCJodHRwczovL3QubWUvYW5oY29kZWNsaWNrIiwgMjAwMCk7DQogICAgZWNobyAiXDAzM1sxOzM1bSBaYWxvOiAgICAgXDAzM1swbSI7ICBwcmludFNsb3coImh0dHBzOi8vemFsby5tZS9nL25zaWxwaDI4OCIsIDIwMDApOw0KICAgIGVjaG8gIlwwMzNbMTszMW0gWW91VHViZTogIFwwMzNbMG0iOyAgcHJpbnRTbG93KCJodHRwczovL3lvdXR1YmUuY29tL0BhbmhoY29kZSIsIDIwMDApOw0KICAgIGVjaG8gJHRoYW5obmdhbmc7DQp9DQpsb2dvKCk7DQovLyAuLi4gY8OhYyDEkW/huqFuIHRyw6puIGtow7RuZyDEkeG7lWkgLi4uDQoNCi8vID09PSBOSOG6rFAgVE9LRU4gVFRDID09PQ0KJHR0Y190b2tlbl9maWxlID0gX19ESVJfXyAuICcvdHRjX3Rva2VuLnR4dCc7DQppZiAoZmlsZV9leGlzdHMoJHR0Y190b2tlbl9maWxlKSkgew0KICAgICRvbGQgPSB0cmltKGZpbGVfZ2V0X2NvbnRlbnRzKCR0dGNfdG9rZW5fZmlsZSkpOw0KICAgICR1c2Vfb2xkID0gc3RydG9sb3dlcihpbnB1dCgiJHRoYW5oX2RlcCBEw7luZyBs4bqhaSB0b2tlbiBUVEMgY8WpJGx1YyB5JHZhbmcgLyRkbyBuJHZhbmcgOiRob25nICIpKTsNCiAgICBpZiAoJHVzZV9vbGQgPT09ICd5Jykgew0KICAgICAgICAkdHRjX3Rva2VuID0gJG9sZDsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkdHRjX3Rva2VuID0gaW5wdXQoIiR0aGFuaF9kZXAgTmjhuq1wIHRva2VuIFRUQzokdmFuZyAiKTsNCiAgICAgICAgZmlsZV9wdXRfY29udGVudHMoJHR0Y190b2tlbl9maWxlLCAkdHRjX3Rva2VuKTsNCiAgICB9DQp9IGVsc2Ugew0KICAgICR0dGNfdG9rZW4gPSBpbnB1dCgiJHRoYW5oX2RlcCAkbHVjIE5o4bqtcCB0b2tlbiBUVEM6JHZhbmcgIik7DQogICAgZmlsZV9wdXRfY29udGVudHMoJHR0Y190b2tlbl9maWxlLCAkdHRjX3Rva2VuKTsNCn0NCmxvZ28oKTsvLy9sbG9nbw0KJGxvZ2luID0gY3VybF9wb3N0KCdodHRwczovL3R1b25ndGFjY2hlby5jb20vbG9naW50b2tlbi5waHAnLCBbJ2FjY2Vzc190b2tlbicgPT4gJHR0Y190b2tlbl0pOw0KJGRhdGEgPSBqc29uX2RlY29kZSgkbG9naW4sIHRydWUpOw0KaWYgKCRkYXRhWydzdGF0dXMnXSAhPSAnc3VjY2VzcycpIGRpZSgiJGRvIExvZ2luIFRUQyB0aOG6pXQgYuG6oWlcbiIpOw0KZWNobyAiJGhvbmcgPT09PT0kbHVjIExPR0lOIFRUQyBUSMOATkggQ8OUTkckaG9uZyA9PT09PVxuIjsNCmVjaG8iJHRoYW5oX3hhdSRsdWMgTkFNRTokdmFuZyB7JGRhdGFbJ2RhdGEnXVsndXNlciddfVxuIjsNCmVjaG8iJHRoYW5oX3hhdSRsdWMgU+G7kSBExrA6JHZhbmcgIiAuIG51bWJlcl9mb3JtYXQoJGRhdGFbJ2RhdGEnXVsnc29kdSddLCAwLCAnLCcsICcuJykgLiAiIHh1XG4iOw0KZWNobyIkdGhhbmhuZ2FuZyI7DQovLyA9PT0gTkjhuqxQIERBTkggU8OBQ0ggVE9LRU4gRkFDRUJPT0sgPT09DQokZmJfdG9rZW5fZmlsZSA9IF9fRElSX18gLiAnL2ZiX3Rva2Vucy50eHQnOw0KJGZiX3Rva2VucyA9IFtdOw0KDQppZiAoZmlsZV9leGlzdHMoJGZiX3Rva2VuX2ZpbGUpKSB7DQogICAgJHVzZV9vbGRfZmIgPSBzdHJ0b2xvd2VyKGlucHV0KCIkdGhhbmhfZGVwJHZhbmcgZMO5bmcgbOG6oWkgdG9rZW4gZmIgY8WpJGx1YyB5JHZhbmcgLyRkbyBuJHZhbmcgOiRob25nICIpKTsNCiAgICBpZiAoJHVzZV9vbGRfZmIgPT09ICd5Jykgew0KICAgICAgICAkZmJfdG9rZW5zID0gYXJyYXlfZmlsdGVyKGFycmF5X21hcCgndHJpbScsIGZpbGUoJGZiX3Rva2VuX2ZpbGUpKSk7DQogICAgfQ0KfQ0KDQppZiAoZW1wdHkoJGZiX3Rva2VucykpIHsNCiAgICBlY2hvICIkdGhhbmhfZGVwIE5o4bqtcCB0b2tlbiBGYWNlYm9vayBt4buXaSBkw7JuZyAxIHRva2VuIE5o4bqlbiBFbnRlciDEkeG7gyB0aG/DoXQ6ICI7DQogICAgd2hpbGUgKHRydWUpIHsNCiAgICAgICAgJGxpbmUgPSB0cmltKGZnZXRzKFNURElOKSk7DQogICAgICAgIGlmICgkbGluZSA9PT0gJycpIGJyZWFrOyAvLyBu4bq/dSBkw7JuZyB0cuG7kW5nIHRow6wga+G6v3QgdGjDumMNCiAgICAgICAgJGZiX3Rva2Vuc1tdID0gJGxpbmU7DQogICAgfQ0KICAgIGZpbGVfcHV0X2NvbnRlbnRzKCRmYl90b2tlbl9maWxlLCBpbXBsb2RlKCJcbiIsICRmYl90b2tlbnMpKTsNCn0NCg0KaWYgKGNvdW50KCRmYl90b2tlbnMpID09PSAwKSBkaWUoIiRkbyBLaMO0bmcgY8OzIHRva2VuIEZhY2Vib29rIG7DoG9cciIpOw0KDQoNCiRkZWxheSA9IChpbnQpaW5wdXQoIiR0aGFuaF9kZXAkbHVjIE5o4bqtcCBkZWxheTokdmFuZyAiKTsNCiRsaW1pdF9wZXJfdG9rZW4gPSAoaW50KWlucHV0KCIkdGhhbmhfZGVwIEJhbyBuaGnDqnUgbmhp4buHbSB24bulIHRow6wgxJHhu5VpIHRva2VuOiRob25nICIpOw0KJHRoYXRiYWkgPSAoaW50KWlucHV0KCIkdGhhbmhfZGVwJGx1YyB0aOG6pXQgYuG6oWkgYmFvIG5oacOqdSB0aMOsIMSR4buVaSB0b2tlbjokdmFuZyAiKTsNCiRoZWFkZXJzID0gWyJVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCIsICJYLVJlcXVlc3RlZC1XaXRoOiBYTUxIdHRwUmVxdWVzdCJdOw0KJHR5cGVzID0gWydzdWJjaGVvJywgJ2xpa2Vwb3N0dmlwcmUnLCAnY210Y2hlbycsICdsaWtlcGFnZWNoZW8nLCAnbGlrZXBvc3R2aXBjaGVvJ107DQokdHlwZV9pbmRleCA9IDA7IC8vIENo4buJIHPhu5EgxJHhu4MgbOG6rXQgbG/huqFpDQokdG9rZW5faW5kZXggPSAwOw0KJGxpa2VfY291bnQgPSAwOw0KJHR0ID0gMDsNCiR4dSA9IDA7DQokZmFpbF9jb3VudCA9IDA7DQokdG9uZ194dSA9IDA7IA0KZWNobyIkdGhhbmhuZ2FuZyI7DQp3aGlsZSAodHJ1ZSkgew0KICAgICR0eXBlID0gJHR5cGVzWyR0eXBlX2luZGV4XTsNCiAgICBlY2hvICIkaG9uZyAkdHlwZVxyIjsNCiAgICBpZiAoIWlzc2V0KCRmYl90b2tlbnNbJHRva2VuX2luZGV4XSkpIHsNCiAgICAgICAgJHRva2VuX2luZGV4ID0gMDsgDQogICAgfQ0KICAgICR0b2tlbiA9ICRmYl90b2tlbnNbJHRva2VuX2luZGV4XTsNCiAgICAkdWlkX2pzb24gPSBmaWxlX2dldF9jb250ZW50cygiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWU/YWNjZXNzX3Rva2VuPSR0b2tlbiIpOw0KICAgICR1aWRfZGF0YSA9IGpzb25fZGVjb2RlKCR1aWRfanNvbiwgdHJ1ZSk7DQoNCiAgICBpZiAoIWlzc2V0KCR1aWRfZGF0YVsnaWQnXSkpIHsNCiAgICAgICAgZWNobyAiJGRvIFRva2VuIGtow7RuZyBo4bujcCBs4buHXHIiOw0KICAgICAgICAkdG9rZW5faW5kZXgrKzsNCiAgICAgICAgY29udGludWU7DQogICAgfQ0KDQogICAgJGZiX3Rva2VuID0gJGZiX3Rva2Vuc1skdG9rZW5faW5kZXhdOw0KICAgICR1aWRfanNvbiA9IGZpbGVfZ2V0X2NvbnRlbnRzKCJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS9tZT9hY2Nlc3NfdG9rZW49JGZiX3Rva2VuIik7DQogICAgJHVpZF9kYXRhID0ganNvbl9kZWNvZGUoJHVpZF9qc29uLCB0cnVlKTsNCg0KICAgIGlmICghaXNzZXQoJHVpZF9kYXRhWydpZCddKSkgew0KICAgICAgICBlY2hvICJUb2tlbiBraMO0bmcgaOG7o3AgbOG7hywgY2h1eeG7g24gdG9rZW4ga2jDoWMuLi5cbiI7DQogICAgICAgICR0b2tlbl9pbmRleCsrOw0KICAgICAgICBjb250aW51ZTsNCiAgICB9DQogDQogICAgJGZiX3VpZCA9ICR1aWRfZGF0YVsnaWQnXTsNCiAgICAkZmJfbmFtZSA9ICR1aWRfZGF0YVsnbmFtZSddOw0KICAgIC8vID09PSDEkOG6tlQgTklDSyA9PT0NCiRkYXRuaWNrID0gY3VybF9wb3N0KA0KICAgICdodHRwczovL3R1b25ndGFjY2hlby5jb20vY2F1aGluaC9kYXRuaWNrLnBocCcsDQogICAgImlkZGF0JTVCJTVEPSRmYl91aWQmbG9haT1mYiIsDQogICAgYXJyYXlfbWVyZ2UoJGhlYWRlcnMsIFsNCiAgICAgICAgIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04Ig0KICAgIF0pDQopOw0KaWYgKHN0cnBvcygkZGF0bmljaywgJzEnKSAhPT0gZmFsc2UpIHsNCiNlY2hvIiR0aGFuaG5nYW5nIjsNCiBlY2hvICIkbHVjIMSQQU5HIENI4bqgWSBUSzokdmFuZyAkZmJfbmFtZSAkbHVjIElEOiR2YW5nICRmYl91aWQgJGx1YyBcciI7DQojZWNobyIkdGhhbmhuZ2FuZyI7ICAgIA0KfSBlbHNlIHsNCiAgICBlY2hvICIkZG8gQ+G6pFUgSMOMTkggVEjhuqRUIELhuqBJOiR2YW5nICAkZGF0bmlja1xyIjsNCn0NCg0KaWYgKCR0eXBlID09ICdsaWtlcG9zdHZpcGNoZW8nKSB7IA0KJGdldHBvc3QgPSBjdXJsX2dldCgiaHR0cHM6Ly90dW9uZ3RhY2NoZW8uY29tL2tpZW10aWVuL2xpa2Vwb3N0dmlwY2hlby9nZXRwb3N0LnBocCIsICRoZWFkZXJzKTsNCiRwb3N0cyA9IGpzb25fZGVjb2RlKCRnZXRwb3N0LCB0cnVlKTsNCg0KLy8gTuG6v3UgcGjhuqNuIGjhu5NpIGzDoCBs4buXaSBk4bqhbmcgY2h14buXaSB0aMO0bmcgYsOhbw0KaWYgKGlzc2V0KCRwb3N0c1snZXJyb3InXSkpIHsNCiAgICAkY291bnRkb3duID0gaXNzZXQoJHBvc3RzWydjb3VudGRvd24nXSkgPyAkcG9zdHNbJ2NvdW50ZG93biddIDogMTA7DQogICAgZWNobyAixJBBTkcgTOG6pFkgTkhJ4buGTSBW4bukIExJS0UgVklQIHwgxJDhu6JJICRjb3VudGRvd24gZ2nDonkuLi5cciI7DQogICAgc2xlZXAoJGNvdW50ZG93bik7DQogICAgY29udGludWU7DQp9DQoNCmlmICghaXNfYXJyYXkoJHBvc3RzKSkgew0KICAgDQogICAgY29udGludWU7DQp9DQogICAgICAgICAgICAkdHlwZV9pbmRleCsrOw0KICAgICAgICAgICAgaWYgKCR0eXBlX2luZGV4ID49IGNvdW50KCR0eXBlcykpIHsNCiAgICAgICAgICAgICR0eXBlX2luZGV4ID0gMDsNCiAgICAgICAgICAgIH0NCmZvcmVhY2ggKCRwb3N0cyBhcyAkaW5kZXggPT4gJHBvc3QpIHsNCiAgICBpZiAoIWlzX2FycmF5KCRwb3N0KSB8fCAhaXNzZXQoJHBvc3RbJ2lkcG9zdCddKSB8fCAhaXNzZXQoJHBvc3RbJ2lkZmInXSkpIHsNCiAgICAgICAgZWNobyAiTOG7lkkgROG7riBMSeG7hlUgTElLRVxyIjsNCiAgICAgICAgcHJpbnRfcigkcG9zdCk7DQogICAgICAgIGNvbnRpbnVlOw0KICAgIH0NCg0KICAgICRpZHBvc3QgPSAkcG9zdFsnaWRwb3N0J107DQogICAgJHBhZ2VfaWQgPSAkcG9zdFsnaWRmYiddOw0KDQoNCiAgICAgICAgJHR0Kys7DQoNCiAgICAgICAgaWYgKCFsaWtldmlwKCR0b2tlbiwgJHBhZ2VfaWQpKSB7DQogICAgICAgICAgICBlY2hvICIkdHQgfCBMSUtFIFRI4bqkVCBC4bqgSSBJRDogJGlkcG9zdFxyIjsNCiAgICAgICAgICAgICRmYWlsX2NvdW50Kys7DQoNCiAgICAgICAgICAgIGlmICgkZmFpbF9jb3VudCA+PSR0aGF0YmFpKSB7DQogICAgICAgICAgICAgICAgZWNobyAiTElLRSBUSOG6pFQgQuG6oEkgJHRoYXRiYWkgQ0hVWeG7gk4gVEtcciI7DQogICAgICAgICAgICAgICAgJHRva2VuX2luZGV4Kys7DQogICAgICAgICAgICAgICAgJGxpa2VfY291bnQgPSAwOw0KICAgICAgICAgICAgICAgICRmYWlsX2NvdW50ID0gMDsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgY29udGludWU7DQogICAgICAgIH0NCg0KICAgICAgICAkZmFpbF9jb3VudCA9IDA7IC8vIHJlc2V0IG7hur91IHRow6BuaCBjw7RuZw0KDQogICAgICAgICRuaGFuID0gY3VybF9wb3N0KCJodHRwczovL3R1b25ndGFjY2hlby5jb20va2llbXRpZW4vbGlrZXBvc3R2aXBjaGVvL25oYW50aWVuLnBocCIsICJpZD0kaWRwb3N0IiwgYXJyYXlfbWVyZ2UoJGhlYWRlcnMsIFsiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiXSkpOw0KICAgICAgICAkanNvbiA9IGpzb25fZGVjb2RlKCRuaGFuLCB0cnVlKTsNCiAgICAgICAgaWYgKGlzc2V0KCRqc29uWydlcnJvciddKSkgew0KICAgICAgICBlY2hvICJMSUtFIFRI4bqkVCBC4bqgSSBC4buOIFFVQSBcciI7DQogICAgICAgICBicmVhazsgLy8gVGhvw6F0IGto4buPaSB2w7JuZyBs4bq3cA0KICAgICAgICB9DQogICAgICAgIHByZWdfbWF0Y2goJy9cZCsvJywgJG5oYW4sICRtKTsNCiAgICAgICAgICAgICR4dWpvYiA9ICRtWzBdOw0KICAgICAgICAgICAgJHh1ICs9ICR4dWpvYjsNCiAgICAgICAgICAgICRkZW0gPSAkdHQ7DQogICAgICAgICAgICAkbG9haSA9ICJMSUtFIFZJUCI7DQogICAgICAgICAgICAkaWQgPSBzdWJzdHIoJGlkcG9zdCwgLTcpOw0KICAgICAgICAgICAgaGllbnRoaSgkZmJfbmFtZSwgJGRlbSwgJGxvYWksICRpZCwgJHh1am9iLCAkeHUpOw0KDQogICAgICAgICRsaWtlX2NvdW50Kys7DQogICAgICAgIGlmICgkbGlrZV9jb3VudCA+PSAkbGltaXRfcGVyX3Rva2VuKSB7DQogICAgICAgICAgICBlY2hvICLEkMODIMSQ4bumICRsaW1pdF9wZXJfdG9rZW4gTElLRSBDSFVZ4buCTiBUS1xyIjsNCiAgICAgICAgICAgICR0b2tlbl9pbmRleCsrOw0KICAgICAgICAgICAgJGxpa2VfY291bnQgPSAwOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIH0NCiAgICAgICAgZGVsYXkgKCRkZWxheSk7DQogICAgfQ0KICAgIA0KICAgICB9DQplbHNlaWYgKCR0eXBlID09ICdjbXRjaGVvJykgeyANCiAgICAkZ2V0cG9zdCA9IGN1cmxfZ2V0KCJodHRwczovL3R1b25ndGFjY2hlby5jb20va2llbXRpZW4vY210Y2hlby9nZXRwb3N0LnBocCIsICRoZWFkZXJzKTsNCiAgICAkcG9zdHMgPSBqc29uX2RlY29kZSgkZ2V0cG9zdCwgdHJ1ZSk7DQogICAgIGlmIChpc3NldCgkcG9zdHNbJ2Vycm9yJ10pKSB7DQogICAgDQogICAgZWNobyAi4puUIHskcG9zdHNbJ2Vycm9yJ119IHwgxJDhu6NpICBnacOieS4uLlxyIjsNCiAgDQogICAgY29udGludWU7DQp9DQogICAgaWYgKCEkcG9zdHMpIHsNCiAgICAgICAgZWNobyAiS2jDtG5nIGPDsyBuaGnhu4dtIHbhu6UgJHR5cGUgXHIiOw0KICAgICAgICBicmVhazsNCiAgICB9DQogICAgICAgICAgICAkdHlwZV9pbmRleCsrOw0KICAgICAgICAgICAgaWYgKCR0eXBlX2luZGV4ID49IGNvdW50KCR0eXBlcykpIHsNCiAgICAgICAgICAgICR0eXBlX2luZGV4ID0gMDsNCiAgICAgICAgICAgIH0NCiAgICBmb3JlYWNoICgkcG9zdHMgYXMgJHBvc3QpIHsNCiAgICAgICAgJHBhZ2VfaWQgPSBiYXNlbmFtZSgkcG9zdFsnbGluayddKTsNCiAgICAgICAgJGlkcG9zdCA9ICRwb3N0WydpZHBvc3QnXTsNCiAgICAgICAgJG5kX2xpc3QgPSBqc29uX2RlY29kZSgkcG9zdFsnbmQnXSwgdHJ1ZSk7DQogICAgICAgICRtc2cgPSAkbmRfbGlzdFthcnJheV9yYW5kKCRuZF9saXN0KV07DQoNCiAgICAgICAgJHR0Kys7DQoNCg0KICAgICAgICBpZiAoIWNtdCgkdG9rZW4sICRpZHBvc3QsICRtc2cpKSB7DQogICAgICAgICAgICBlY2hvICIkdHQgfCBDT01NRU5UIFRI4bqkVCBC4bqgSSBJRDogJGlkcG9zdFxyIjsNCiAgICAgICAgICAgICRmYWlsX2NvdW50Kys7DQoNCiAgICAgICAgICAgIGlmICgkZmFpbF9jb3VudCA+PSR0aGF0YmFpKSB7DQogICAgICAgICAgICAgICAgZWNobyAiQ09NTUVOVCBUSOG6pFQgQuG6oEkgJHRoYXRiYWkgTOG6pk4gQ0hVWeG7gk4gVEtcciI7DQogICAgICAgICAgICAgICAgJHRva2VuX2luZGV4Kys7DQogICAgICAgICAgICAgICAgJGxpa2VfY291bnQgPSAwOw0KICAgICAgICAgICAgICAgICRmYWlsX2NvdW50ID0gMDsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgY29udGludWU7DQogICAgICAgIH0NCg0KICAgICAgICAkZmFpbF9jb3VudCA9IDA7IC8vIHJlc2V0IG7hur91IHRow6BuaCBjw7RuZw0KDQogICAgICAgICRuaGFuID0gY3VybF9wb3N0KCJodHRwczovL3R1b25ndGFjY2hlby5jb20va2llbXRpZW4vY210Y2hlby9uaGFudGllbi5waHAiLCAiaWQ9JGlkcG9zdCIsIGFycmF5X21lcmdlKCRoZWFkZXJzLCBbIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04Il0pKTsNCiAgICAgICAgJGpzb24gPSBqc29uX2RlY29kZSgkbmhhbiwgdHJ1ZSk7DQogICAgICAgIGlmIChpc3NldCgkanNvblsnZXJyb3InXSkpIHsNCiAgICAgICAgZWNobyAiQ09NTUVOVCBUSOG6pFQgQuG6oEkgQuG7jiBRVUEgXHIiOw0KICAgICAgICAgICAgICBicmVhazsgLy8gVGhvw6F0IGto4buPaSB2w7JuZyBs4bq3cA0KICAgICAgICB9DQogICAgICAgIHByZWdfbWF0Y2goJy9cZCsvJywgJG5oYW4sICRtKTsNCiAgICAgICAgICAgICR4dWpvYiA9ICRtWzBdOw0KICAgICAgICAgICAgJHh1ICs9ICR4dWpvYjsNCiAgICAgICAgICAgICRkZW0gPSAkdHQ7DQogICAgICAgICAgICAkbG9haSA9ICJDT01NRU5UIjsNCiAgICAgICAgICAgICRpZCA9IHN1YnN0cigkaWRwb3N0LCAtNyk7DQogICAgICAgICAgICBoaWVudGhpKCRmYl9uYW1lLCAkZGVtLCAkbG9haSwgJGlkLCAkeHVqb2IsICR4dSk7DQoNCiAgICAgICAgJGxpa2VfY291bnQrKzsNCiAgICAgICAgaWYgKCRsaWtlX2NvdW50ID49ICRsaW1pdF9wZXJfdG9rZW4pIHsNCiAgICAgICAgICAgIGVjaG8gIsSQw4MgxJDhu6YgJGxpbWl0X3Blcl90b2tlbiBDT01NRU5ULiBDSFVZ4buCTiBUS1xyIjsNCiAgICAgICAgICAgICR0b2tlbl9pbmRleCsrOw0KICAgICAgICAgICAgJGxpa2VfY291bnQgPSAwOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIH0NCg0KICAgICAgICBkZWxheSAoJGRlbGF5KTsNCiAgICB9DQoNCn0NCiAgICAgDQplbHNlaWYgKCR0eXBlID09ICdsaWtlcGFnZWNoZW8nKSB7ICAgICANCiAgICAkZ2V0cG9zdCA9IGN1cmxfZ2V0KCJodHRwczovL3R1b25ndGFjY2hlby5jb20va2llbXRpZW4vbGlrZXBhZ2VjaGVvL2dldHBvc3QucGhwIiwgJGhlYWRlcnMpOw0KICAgICRwb3N0cyA9IGpzb25fZGVjb2RlKCRnZXRwb3N0LCB0cnVlKTsNCg0KICAgIGlmICghJHBvc3RzKSB7DQogICAgICAgIGVjaG8gIiRkbyBLaMO0bmcgY8OzIG5oaeG7h20gduG7pSAkdHlwZSBjaOG7nSAuXHIiOw0KICAgICAgICANCiAgICAgICAgYnJlYWs7DQogICAgfQ0KICAgICAgICAgICAgJHR5cGVfaW5kZXgrKzsNCiAgICAgICAgICAgIGlmICgkdHlwZV9pbmRleCA+PSBjb3VudCgkdHlwZXMpKSB7DQogICAgICAgICAgICAkdHlwZV9pbmRleCA9IDA7DQogICAgICAgICAgICB9DQogICAgZm9yZWFjaCAoJHBvc3RzIGFzICRwb3N0KSB7DQogICAgICAgICRwYWdlX2lkID0gYmFzZW5hbWUoJHBvc3RbJ2xpbmsnXSk7DQogICAgICAgICRpZHBvc3QgPSAkcG9zdFsnaWRwb3N0J107DQogICAgICAgICR0dCsrOw0KDQogICAgICAgIGlmICghbGlrZV9wYWdlX2ZhY2Vib29rKCR0b2tlbiwgJGZiX3VpZCwgJHBhZ2VfaWQpKSB7DQogICAgICAgICAgICBlY2hvICIkdHQgfCBMSUtFIFBBR0UgVEjhuqRUIELhuqBJIElEOiAkaWRwb3N0XHIiOw0KICAgICAgICAgICAgJGZhaWxfY291bnQrKzsNCg0KICAgICAgICAgICAgaWYgKCRmYWlsX2NvdW50ID49JHRoYXRiYWkpIHsNCiAgICAgICAgICAgICAgICBlY2hvICJQQUdFIFRI4bqkVCBC4bqgSSAkdGhhdGJhaSBM4bqmTiBDSFVZ4buCTiBUS1xyIjsNCiAgICAgICAgICAgICAgICAkdG9rZW5faW5kZXgrKzsNCiAgICAgICAgICAgICAgICAkbGlrZV9jb3VudCA9IDA7DQogICAgICAgICAgICAgICAgJGZhaWxfY291bnQgPSAwOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgfQ0KDQogICAgICAgICRmYWlsX2NvdW50ID0gMDsgLy8gcmVzZXQgbuG6v3UgdGjDoG5oIGPDtG5nDQoNCiAgICAgICAgJG5oYW4gPSBjdXJsX3Bvc3QoImh0dHBzOi8vdHVvbmd0YWNjaGVvLmNvbS9raWVtdGllbi9saWtlcGFnZWNoZW8vbmhhbnRpZW4ucGhwIiwgImlkPSRpZHBvc3QiLCBhcnJheV9tZXJnZSgkaGVhZGVycywgWyJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCJdKSk7DQogICAgICAgICRqc29uID0ganNvbl9kZWNvZGUoJG5oYW4sIHRydWUpOw0KICAgICAgICBpZiAoaXNzZXQoJGpzb25bJ2Vycm9yJ10pKSB7DQogICAgICAgIGVjaG8gIkZPTExPVyBUSOG6pFQgQuG6oEkgQuG7jiBRVUEgXHIiOw0KICAgICAgICAgICAgYnJlYWs7IA0KICAgICAgICB9DQogICAgICAgIHByZWdfbWF0Y2goJy9cZCsvJywgJG5oYW4sICRtKTsNCiAgICAgICAgICAgICR4dWpvYiA9ICRtWzBdOw0KICAgICAgICAgICAgJHh1ICs9ICR4dWpvYjsNCiAgICAgICAgICAgICRkZW0gPSAkdHQ7DQogICAgICAgICAgICAkbG9haSA9ICJQQUdFIjsNCiAgICAgICAgICAgICRpZCA9IHN1YnN0cigkaWRwb3N0LCAtNyk7DQogICAgICAgICAgICBoaWVudGhpKCRmYl9uYW1lLCAkZGVtLCAkbG9haSwgJGlkLCAkeHVqb2IsICR4dSk7DQoNCiAgICAgICAgJGxpa2VfY291bnQrKzsNCiAgICAgICAgaWYgKCRsaWtlX2NvdW50ID49ICRsaW1pdF9wZXJfdG9rZW4pIHsNCiAgICAgICAgICAgIGVjaG8gIsSQw4MgxJDhu6YgJGxpbWl0X3Blcl90b2tlbiBQQUdFIENIVVnhu4JOIFRLXHIiOw0KICAgICAgICAgICAgJHRva2VuX2luZGV4Kys7DQogICAgICAgICAgICAkbGlrZV9jb3VudCA9IDA7DQogICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KDQogICAgICAgIGRlbGF5ICgkZGVsYXkpOw0KICAgIH0gICAgIA0KICAgIA0KfQ0KDQplbHNlaWYgKCR0eXBlID09ICdsaWtlcG9zdHZpcHJlJykgeyAgDQokZ2V0cG9zdCA9IGN1cmxfZ2V0KCJodHRwczovL3R1b25ndGFjY2hlby5jb20va2llbXRpZW4vbGlrZXBvc3R2aXByZS9nZXRwb3N0LnBocCIsICRoZWFkZXJzKTsNCiRwb3N0cyA9IGpzb25fZGVjb2RlKCRnZXRwb3N0LCB0cnVlKTsNCg0KLy8gTuG6v3UgcGjhuqNuIGjhu5NpIGzDoCBs4buXaSBk4bqhbmcgY2h14buXaSB0aMO0bmcgYsOhbw0KaWYgKGlzc2V0KCRwb3N0c1snZXJyb3InXSkpIHsNCiAgICAkY291bnRkb3duID0gaXNzZXQoJHBvc3RzWydjb3VudGRvd24nXSkgPyAkcG9zdHNbJ2NvdW50ZG93biddIDogMTA7DQogICAgZWNobyAixJBBTkcgTOG6pFkgTkhJ4buGTSBW4bukIExJS0UgfCDEkOG7okkgJGNvdW50ZG93biBnacOieS4uLlxyIjsNCiAgICBzbGVlcCgkY291bnRkb3duKTsNCiAgICBjb250aW51ZTsNCn0NCg0KLy8gTuG6v3Uga2jDtG5nIHBo4bqjaSBt4bqjbmcgZGFuaCBzw6FjaCBuaGnhu4dtIHbhu6UNCmlmICghaXNfYXJyYXkoJHBvc3RzKSkgew0KDQogICAgY29udGludWU7DQp9DQogICAgICAgICAgICAkdHlwZV9pbmRleCsrOw0KICAgICAgICAgICAgaWYgKCR0eXBlX2luZGV4ID49IGNvdW50KCR0eXBlcykpIHsNCiAgICAgICAgICAgICR0eXBlX2luZGV4ID0gMDsNCiAgICAgICAgICAgIH0NCmZvcmVhY2ggKCRwb3N0cyBhcyAkaW5kZXggPT4gJHBvc3QpIHsNCiAgICBpZiAoIWlzX2FycmF5KCRwb3N0KSB8fCAhaXNzZXQoJHBvc3RbJ2lkcG9zdCddKSB8fCAhaXNzZXQoJHBvc3RbJ2lkZmInXSkpIHsNCiAgICAgICAgZWNobyAiTOG7l2kgZOG7ryBsaeG7h3UgTGlrZSBraMO0bmcgaOG7o3AgbGVcciI7DQogICAgICAgIHByaW50X3IoJHBvc3QpOw0KICAgICAgICBjb250aW51ZTsNCiAgICB9DQoNCiAgICAkaWRwb3N0ID0gJHBvc3RbJ2lkcG9zdCddOw0KICAgICRwYWdlX2lkID0gJHBvc3RbJ2lkZmInXTsNCg0KDQogICAgICAgICR0dCsrOw0KDQogICAgICAgIGlmICghbGlrZSgkdG9rZW4sICRwYWdlX2lkKSkgew0KICAgICAgICAgICAgZWNobyAiJHR0IHwgTElLRSBUSOG6pFQgQuG6oEkgSUQ6ICRpZHBvc3RcciI7DQogICAgICAgICAgICAkZmFpbF9jb3VudCsrOw0KDQogICAgICAgICAgICBpZiAoJGZhaWxfY291bnQgPj0kdGhhdGJhaSkgew0KICAgICAgICAgICAgICAgIGVjaG8gIkxJS0UgVEjhuqRUIELhuqBJICR0aGF0YmFpIEzhuqZOIENIVVnhu4JOIFRLXHIiOw0KICAgICAgICAgICAgICAgICR0b2tlbl9pbmRleCsrOw0KICAgICAgICAgICAgICAgICRsaWtlX2NvdW50ID0gMDsNCiAgICAgICAgICAgICAgICAkZmFpbF9jb3VudCA9IDA7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgJGZhaWxfY291bnQgPSAwOyAvLyByZXNldCBu4bq/dSB0aMOgbmggY8O0bmcNCg0KICAgICAgICAkbmhhbiA9IGN1cmxfcG9zdCgiaHR0cHM6Ly90dW9uZ3RhY2NoZW8uY29tL2tpZW10aWVuL2xpa2Vwb3N0dmlwcmUvbmhhbnRpZW4ucGhwIiwgImlkPSRpZHBvc3QiLCBhcnJheV9tZXJnZSgkaGVhZGVycywgWyJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCJdKSk7DQogICAgICAgICRqc29uID0ganNvbl9kZWNvZGUoJG5oYW4sIHRydWUpOw0KICAgICAgICBpZiAoaXNzZXQoJGpzb25bJ2Vycm9yJ10pKSB7DQogICAgICAgIGVjaG8gIkxJS0UgVEjhuqRUIELhuqBJIELhu44gUVVBIFxyIjsNCiAgICAgICAgICAgICAgYnJlYWs7IC8vIFRob8OhdCBraOG7j2kgdsOybmcgbOG6t3ANCiAgICAgICAgfQ0KICAgICAgICBwcmVnX21hdGNoKCcvXGQrLycsICRuaGFuLCAkbSk7DQogICAgICAgICAgICAkeHVqb2IgPSAkbVswXTsNCiAgICAgICAgICAgICR4dSArPSAkeHVqb2I7DQogICAgICAgICAgICAkZGVtID0gJHR0Ow0KICAgICAgICAgICAgJGxvYWkgPSAiTElLRSI7DQogICAgICAgICAgICAkaWQgPSBzdWJzdHIoJGlkcG9zdCwgLTcpOw0KICAgICAgICAgICAgaGllbnRoaSgkZmJfbmFtZSwgJGRlbSwgJGxvYWksICRpZCwgJHh1am9iLCAkeHUpOw0KICAgICAgICAkbGlrZV9jb3VudCsrOw0KICAgICAgICBpZiAoJGxpa2VfY291bnQgPj0gJGxpbWl0X3Blcl90b2tlbikgew0KICAgICAgICAgICAgZWNobyAixJDDgyDEkOG7piAkbGltaXRfcGVyX3Rva2VuIExJS0UgQ0hVWeG7gk4gVEtcciI7DQogICAgICAgICAgICAkdG9rZW5faW5kZXgrKzsNCiAgICAgICAgICAgICRsaWtlX2NvdW50ID0gMDsNCiAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICB9DQoNCiAgICAgICAgZGVsYXkgKCRkZWxheSk7DQogICAgfQ0KICAgIA0KfQ0KDQplbHNlaWYgKCR0eXBlID09ICdzdWJjaGVvJykgeyAgDQogICAgJGdldHBvc3QgPSBjdXJsX2dldCgiaHR0cHM6Ly90dW9uZ3RhY2NoZW8uY29tL2tpZW10aWVuL3N1YmNoZW8vZ2V0cG9zdC5waHAiLCAkaGVhZGVycyk7DQogICAgJHBvc3RzID0ganNvbl9kZWNvZGUoJGdldHBvc3QsIHRydWUpOw0KDQogICAgaWYgKCEkcG9zdHMpIHsNCiAgICAgICAgZWNobyAiS2jDtG5nIGPDsyBuaGnhu4dtIHbhu6UgJHR5cGUgLlxyIjsNCiAgICAgICAgYnJlYWs7DQogICAgfQ0KICAgICAgICAgICAgJHR5cGVfaW5kZXgrKzsNCiAgICAgICAgICAgIGlmICgkdHlwZV9pbmRleCA+PSBjb3VudCgkdHlwZXMpKSB7DQogICAgICAgICAgICAkdHlwZV9pbmRleCA9IDA7DQogICAgICAgICAgICB9DQogICAgZm9yZWFjaCAoJHBvc3RzIGFzICRwb3N0KSB7DQogICAgICAgICRwYWdlX2lkID0gYmFzZW5hbWUoJHBvc3RbJ2xpbmsnXSk7DQogICAgICAgICRpZHBvc3QgPSAkcG9zdFsnaWRwb3N0J107DQogICAgICAgICR0dCsrOw0KDQogICAgICAgIGlmICghZm9sbG93KCR0b2tlbiwgJGlkcG9zdCkpIHsNCiAgICAgICAgICAgIGVjaG8gIiR0dCB8IEZPTExPVyBUSOG6pFQgQuG6oEkgSUQ6ICRpZHBvc3RcciI7DQogICAgICAgICAgICAkZmFpbF9jb3VudCsrOw0KDQogICAgICAgICAgICBpZiAoJGZhaWxfY291bnQgPj0gJHRoYXRiYWkpIHsNCiAgICAgICAgICAgICAgICBlY2hvICJGT0xMT1cgVEjhuqRUIELhuqBJICR0aGF0YmFpIEzhuqZOIENIVVnhu4JOIFRLXHIiOw0KICAgICAgICAgICAgICAgICR0b2tlbl9pbmRleCsrOw0KICAgICAgICAgICAgICAgICRsaWtlX2NvdW50ID0gMDsNCiAgICAgICAgICAgICAgICAkZmFpbF9jb3VudCA9IDA7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgJGZhaWxfY291bnQgPSAwOyAvLyByZXNldCBu4bq/dSB0aMOgbmggY8O0bmcNCiAgICAgICAgJG5oYW4gPSBjdXJsX3Bvc3QoImh0dHBzOi8vdHVvbmd0YWNjaGVvLmNvbS9raWVtdGllbi9zdWJjaGVvL25oYW50aWVuLnBocCIsICJpZD0kaWRwb3N0IiwgYXJyYXlfbWVyZ2UoJGhlYWRlcnMsIFsiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiXSkpOw0KICAgICAgICAkanNvbiA9IGpzb25fZGVjb2RlKCRuaGFuLCB0cnVlKTsNCiAgICAgICAgaWYgKGlzc2V0KCRqc29uWydlcnJvciddKSkgew0KICAgICAgICBlY2hvICJGT0xMT1cgVEjhuqRUIELhuqBJIELhu44gUVVBIFxyIjsNCiAgICAgICAgICAgICAgICBicmVhazsgLy8gVGhvw6F0IGto4buPaSB2w7JuZyBs4bq3cA0KICAgICAgICB9DQogICAgICAgIHByZWdfbWF0Y2goJy9cZCsvJywgJG5oYW4sICRtKTsNCiAgICAgICAgICAgICR4dWpvYiA9ICRtWzBdOw0KICAgICAgICAgICAgJHh1ICs9ICR4dWpvYjsNCiAgICAgICAgICAgICRkZW0gPSAkdHQ7DQogICAgICAgICAgICAkbG9haSA9ICJGT0xMT1ciOw0KICAgICAgICAgICAgJGlkID0gc3Vic3RyKCRpZHBvc3QsIC03KTsNCiAgICAgICAgICAgIGhpZW50aGkoJGZiX25hbWUsICRkZW0sICRsb2FpLCAkaWQsICR4dWpvYiwgJHh1KTsNCiAgICAgICAgJGxpa2VfY291bnQrKzsNCiAgICAgICAgaWYgKCRsaWtlX2NvdW50ID49ICRsaW1pdF9wZXJfdG9rZW4pIHsNCiAgICAgICAgICAgIGVjaG8gIsSQw4MgxJDhu6YgJGxpbWl0X3Blcl90b2tlbiBGT0xMT1cgQ0hVWeG7gk4gVMOASSBLSE/huqJOXHIiOw0KICAgICAgICAgICAgJHRva2VuX2luZGV4Kys7DQogICAgICAgICAgICAkbGlrZV9jb3VudCA9IDA7DQogICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KDQogICAgICAgIGRlbGF5ICgkZGVsYXkpOw0KICAgIH0NCiANCn0NCg0KfQ==')); ?>